% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lightswitch.R
\name{lightswitch}
\alias{lightswitch}
\alias{turn_on}
\alias{turn_off}
\alias{turned_off}
\alias{turned_on}
\alias{skip_if_vcr_off}
\title{Turn vcr on and off}
\usage{
turn_on()

turn_off(ignore_cassettes = FALSE)

turned_off(code, ignore_cassettes = FALSE)

turned_on()

skip_if_vcr_off()
}
\arguments{
\item{ignore_cassettes}{(logical) Controls what happens when a cassette is
inserted while vcr is turned off. If \code{TRUE} is passed, the cassette
insertion will be ignored; otherwise an error will be raised.
Default: \code{FALSE}}

\item{code}{Any block of code to run, presumably an http request}
}
\description{
\itemize{
\item \code{turn_on()} and \code{turn_off()} turn on and off for the whole session.
\item \code{turned_off(code)} temporarily turns off while \code{code} is running.
\item \code{turned_on()} reports on if vcr is turned on or not.
\item \code{skip_if_vcr_off()} skips a test if vcr is turned off. This is
occassionally useful if you're using a cassette to simulate a faked
request, or if the real request would return differents values (e.g.
you're testing date parsing and the request returns the current date).
}

Learn more in \code{vignette("lightswitch")}.
}
\examples{
\dontrun{
vcr_configure(dir = tempdir())

turn_on()
turned_on()
turn_off()

# turn off for duration of a block
library(crul)
turned_off({
 res <- HttpClient$new(url = "https://hb.opencpu.org/get")$get()
})
res

# turn completely off
turn_off()
library(webmockr)
crul::mock()
# HttpClient$new(url = "https://hb.opencpu.org/get")$get(verbose = TRUE)
turn_on()
}
}
