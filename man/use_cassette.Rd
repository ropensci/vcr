% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use_cassette.R
\name{use_cassette}
\alias{use_cassette}
\alias{local_cassette}
\title{Use a cassette to record HTTP requests}
\usage{
use_cassette(
  name,
  ...,
  dir = NULL,
  record = NULL,
  match_requests_on = NULL,
  allow_playback_repeats = FALSE,
  serialize_with = NULL,
  preserve_exact_body_bytes = NULL,
  re_record_interval = NULL,
  clean_outdated_http_interactions = NULL,
  warn_on_empty = NULL
)

local_cassette(
  name,
  dir = NULL,
  record = NULL,
  match_requests_on = NULL,
  allow_playback_repeats = FALSE,
  serialize_with = NULL,
  preserve_exact_body_bytes = NULL,
  re_record_interval = NULL,
  clean_outdated_http_interactions = NULL,
  warn_on_empty = NULL,
  frame = parent.frame()
)
}
\arguments{
\item{name}{The name of the cassette. This is used to name a file on
disk, so it must be valid file name.}

\item{...}{a block of code containing one or more requests (required). Use
curly braces to encapsulate multi-line code blocks. If you can't pass a code
block use \code{\link[=insert_cassette]{insert_cassette()}} instead.}

\item{dir}{The directory where the cassette will be stored. If unspecified,
(and hasn't been set in \code{\link[=vcr_configure]{vcr_configure()}}) will use \code{test_path("_vcr")}.}

\item{record}{Record mode that dictates how HTTP requests/responses are
recorded. Possible values are:
\itemize{
\item \strong{once}, the default: Replays recorded interactions, records new ones
if no cassette exists, and errors on new requests if cassette exists.
\item \strong{none}: Replays recorded interactions, and errors on any new requests.
Guarnants that no HTTP requests occur.
\item \strong{new_episodes}: Replays recorded interactions and always records new
ones, even if similar interactions exist.
\item \strong{all}: Never replays recorded interactions, always recording new.
Useful for re-recording outdated responses or logging all HTTP requests.
}}

\item{match_requests_on}{Character vector of request matchers used to
determine which recorded HTTP interaction to replay. Possible values are:
\itemize{
\item \code{method}: the HTTP method.
\item \code{uri}: the complete request URI, excluding the port.
\item \code{uri_with_port}: the complete request URI, including the port.
\item \code{host}: the \strong{host} component of the URI.
\item \code{path}: the \strong{path} component of the URI.
\item \code{query}: the \strong{query} component of the URI.
\item \code{body}: the request body.
\item \code{header}: all request headers.
}

If more than one is specified, all components must match in order for the
request to match. If not supplied, defaults to \code{c("method", "uri")}.}

\item{allow_playback_repeats}{(logical) Whether or not to
allow a single HTTP interaction to be played back multiple times.
Default: \code{FALSE}.}

\item{serialize_with}{(character) Which serializer to use.
Valid values are "yaml" (default) and "json". Note that you can have
multiple cassettes with the same name as long as they use different
serializers; so if you only want one cassette for a given cassette name,
make sure to not switch serializers, or clean up files you no longer need.}

\item{preserve_exact_body_bytes}{(logical) Force a binary (base64)
representation of the request and response bondies? By default, vcr
will look at the \code{Content-Type} header to determine if this is necessary,
but if it doesn't work you can set \code{prevsere_exact_body_bytes = TRUE} to
force it.}

\item{re_record_interval}{(integer) How frequently (in seconds) the
cassette should be re-recorded. default: \code{NULL} (not re-recorded)}

\item{clean_outdated_http_interactions}{(logical) Should outdated
interactions be recorded back to file? default: \code{FALSE}}

\item{warn_on_empty}{Warn if the cassette is ejected but no interactions
have been recorded?}

\item{frame}{Attach exit handlers to this environment. Typically, this
should be either the current environment or a parent frame (accessed
through \code{\link[=parent.frame]{parent.frame()}}). See \code{vignette("withr", package = "withr")}
for more details.}
}
\value{
an object of class \code{Cassette}
}
\description{
\code{use_cassette(...)} uses a cassette for the code in \code{...},
\code{local_cassette()} uses a cassette for the current function scope (e.g.
for one test).
}
\section{Cassette options}{


Default values for arguments controlling cassette behavior are
inherited from vcr's global configuration. See \code{\link[=vcr_configure]{vcr_configure()}} for a
complete list of options and their default settings. You can override these
options for a specific cassette by changing an argument's value to something
other than \code{NULL} when calling either \code{insert_cassette()} or
\code{use_cassette()}.
}

\section{Behavior}{

This function handles a few different scenarios:
\itemize{
\item when everything runs smoothly, and we return a \code{Cassette} class object
so you can inspect the cassette, and the cassette is ejected
\item when there is an invalid parameter input on cassette creation,
we fail with a useful message, we don't return a cassette, and the
cassette is ejected
\item when there is an error in calling your passed in code block,
we return with a useful message, and since we use \code{on.exit()}
the cassette is still ejected even though there was an error,
but you don't get an object back
\item whenever an empty cassette (a yml/json file) is found, we delete it
before returning from the \code{use_cassette()} function call. we achieve
this via use of \code{on.exit()} so an empty cassette is deleted even
if there was an error in the code block you passed in
}
}

\section{Cassettes on disk}{

Note that \emph{"eject"} only means that the R session cassette is no longer
in use. If any interactions were recorded to disk, then there is a file
on disk with those interactions.
}

\section{Using with tests (specifically \pkg{testthat})}{

There's a few ways to get correct line numbers for failed tests and
one way to not get correct line numbers:

\emph{Correct}: Either wrap your \code{test_that()} block inside your \code{use_cassette()}
block, OR if you put your \code{use_cassette()} block inside your \code{test_that()}
block put your \code{testthat} expectations outside of the \code{use_cassette()}
block.

\emph{Incorrect}: By wrapping the \code{use_cassette()} block inside your
\code{test_that()} block with your \pkg{testthat} expectations inside the
\code{use_cassette()} block, you'll only get the line number that the
\code{use_cassette()} block starts on.
}

\examples{
\dontrun{
library(vcr)
library(crul)
vcr_configure(dir = tempdir())

use_cassette(name = "apple7", {
  cli <- HttpClient$new(url = "https://hb.opencpu.org")
  resp <- cli$get("get")
})
readLines(file.path(tempdir(), "apple7.yml"))

# preserve exact body bytes - records in base64 encoding
use_cassette("things4", {
  cli <- crul::HttpClient$new(url = "https://hb.opencpu.org")
  bbb <- cli$get("get")
}, preserve_exact_body_bytes = TRUE)
## see the body string value in the output here
readLines(file.path(tempdir(), "things4.yml"))

# cleanup
unlink(file.path(tempdir(), c("things4.yml", "apple7.yml")))


# with httr
library(vcr)
library(httr)
vcr_configure(dir = tempdir(), log = TRUE, log_opts = list(file = file.path(tempdir(), "vcr.log")))

use_cassette(name = "stuff350", {
  res <- GET("https://hb.opencpu.org/get")
})
readLines(file.path(tempdir(), "stuff350.yml"))

use_cassette(name = "catfact456", {
  res <- GET("https://catfact.ninja/fact")
})

# record mode: none
library(crul)
vcr_configure(dir = tempdir())

## make a connection first
conn <- crul::HttpClient$new("https://eu.httpbin.org")
## this errors because 'none' disallows any new requests
# use_cassette("none_eg", (res2 <- conn$get("get")), record = "none")
## first use record mode 'once' to record to a cassette
one <- use_cassette("none_eg", (res <- conn$get("get")), record = "once")
one; res
## then use record mode 'none' to see it's behavior
two <- use_cassette("none_eg", (res2 <- conn$get("get")), record = "none")
two; res2
}
}
\seealso{
\code{\link[=insert_cassette]{insert_cassette()}} and \code{\link[=eject_cassette]{eject_cassette()}} for the underlying
functions.
}
